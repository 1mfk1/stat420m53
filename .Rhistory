install.packages("readr")
install.packages("lmtest")
full_model = lm(life_expectancy ~ ., data = data)
library(readr)
data = read_csv('./data/life_expectancy.csv', show_col_types = FALSE)
head(data)
library(knitr)
predictors = data.frame(names = c("country", "status", "adult mortality", "infant deaths", "Alcohol", "BMI", "GDP", "Population", "Schooling"),
types = c("categorical", "dummy", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
kable(predictors)
names(data)[names(data) == "Country"] = "country"
names(data)[names(data) == "Year"] = "year"
names(data)[names(data) == "Status"] = "status"
names(data)[names(data) == "Life expectancy"] = "life_expectancy"
names(data)[names(data) == "Adult Mortality"] = "adult_mortality"
names(data)[names(data) == "infant deaths"] = "infant_deaths"
names(data)[names(data) == "Alcohol"] = "alcohol"
names(data)[names(data) == "percentage expenditure"] = "percent_exp"
names(data)[names(data) == "Hepatitis B"] = "hepatitis"
names(data)[names(data) == "measles"] = "measles"
names(data)[names(data) == "under-five deaths"] = "under_5_deaths"
names(data)[names(data) == "Polio"] = "polio"
names(data)[names(data) == "Total expenditure"] = "total_exp"
names(data)[names(data) == "Diphtheria"] = "diphtheria"
names(data)[names(data) == "HIV/AIDS"] = "hiv_aids"
names(data)[names(data) == "Population"] = "population"
names(data)[names(data) == "thinness  1-19 years"] = "thinness_1_19"
names(data)[names(data) == "thinness 5-9 years"] = "thinness_5_9"
names(data)[names(data) == "Income composition of resources"] = "HBI"
names(data)[names(data) == "Schooling"] = "schooling"
data$country = as.factor(data$country)
data$year = as.factor(data$year)
data$status = as.factor(data$status)
data = subset(data, percent_exp > 0)
data = subset(data, hiv_aids > 0)
data = subset(data, GDP > 0)
data = na.omit(data)
data_numeric_only = subset(data, select = -c(country, year, status))
pairs(data_numeric_only)
data_transformed = data.frame(data)
data_transformed["log_percent_exp"] = log(data_transformed$percent_exp)
data_transformed["log_hiv_aids"] = log(data_transformed$hiv_aids)
data_transformed["log_GDP"] = log(data_transformed$GDP)
var_cors = round(cor(data_numeric_only), 2)
var_cors
var_cors_df = as.data.frame(as.table(var_cors))
var_cors_df_ordered = var_cors_df[order(var_cors_df$Freq, decreasing = TRUE), ]
var_cors_df_ordered = subset(var_cors_df_ordered, var_cors_df_ordered$Var1 != var_cors_df_ordered$Var2)
var_cors_df_ordered = subset(var_cors_df_ordered, (var_cors_df_ordered$Var1 != "life_expectancy" & var_cors_df_ordered$Var2 != "life_expectancy"))
colnames(var_cors_df_ordered) = c("response1", "response2", "cor")
var_cors_df_ordered
# Set default CRAN mirror and install required packages
options(repos = c(CRAN = "https://cloud.r-project.org"))
required_packages <- c("tseries", "lmtest", "car", "glmnet", "caret", "readr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
# Set default CRAN mirror and install required packages
options(repos = c(CRAN = "https://cloud.r-project.org"))
required_packages <- c("tseries", "lmtest", "car", "glmnet", "caret", "readr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
library(readr)
data = read_csv('./data/life_expectancy.csv', show_col_types = FALSE)
head(data)
library(knitr)
predictors = data.frame(names = c("country", "status", "adult mortality", "infant deaths", "Alcohol", "BMI", "GDP", "Population", "Schooling"),
types = c("categorical", "dummy", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
kable(predictors)
names(data)[names(data) == "Country"] = "country"
names(data)[names(data) == "Year"] = "year"
names(data)[names(data) == "Status"] = "status"
names(data)[names(data) == "Life expectancy"] = "life_expectancy"
names(data)[names(data) == "Adult Mortality"] = "adult_mortality"
names(data)[names(data) == "infant deaths"] = "infant_deaths"
names(data)[names(data) == "Alcohol"] = "alcohol"
names(data)[names(data) == "percentage expenditure"] = "percent_exp"
names(data)[names(data) == "Hepatitis B"] = "hepatitis"
names(data)[names(data) == "measles"] = "measles"
names(data)[names(data) == "under-five deaths"] = "under_5_deaths"
names(data)[names(data) == "Polio"] = "polio"
names(data)[names(data) == "Total expenditure"] = "total_exp"
names(data)[names(data) == "Diphtheria"] = "diphtheria"
names(data)[names(data) == "HIV/AIDS"] = "hiv_aids"
names(data)[names(data) == "Population"] = "population"
names(data)[names(data) == "thinness  1-19 years"] = "thinness_1_19"
names(data)[names(data) == "thinness 5-9 years"] = "thinness_5_9"
names(data)[names(data) == "Income composition of resources"] = "HBI"
names(data)[names(data) == "Schooling"] = "schooling"
data$country = as.factor(data$country)
data$year = as.factor(data$year)
data$status = as.factor(data$status)
data = subset(data, percent_exp > 0)
data = subset(data, hiv_aids > 0)
data = subset(data, GDP > 0)
data = na.omit(data)
data_numeric_only = subset(data, select = -c(country, year, status))
pairs(data_numeric_only)
data_transformed = data.frame(data)
data_transformed["log_percent_exp"] = log(data_transformed$percent_exp)
data_transformed["log_hiv_aids"] = log(data_transformed$hiv_aids)
data_transformed["log_GDP"] = log(data_transformed$GDP)
var_cors = round(cor(data_numeric_only), 2)
var_cors
var_cors_df = as.data.frame(as.table(var_cors))
var_cors_df_ordered = var_cors_df[order(var_cors_df$Freq, decreasing = TRUE), ]
var_cors_df_ordered = subset(var_cors_df_ordered, var_cors_df_ordered$Var1 != var_cors_df_ordered$Var2)
var_cors_df_ordered = subset(var_cors_df_ordered, (var_cors_df_ordered$Var1 != "life_expectancy" & var_cors_df_ordered$Var2 != "life_expectancy"))
colnames(var_cors_df_ordered) = c("response1", "response2", "cor")
var_cors_df_ordered
full_model = lm(life_expectancy ~ ., data = data)
summary(full_model)$r.squared
predictors = names(data)
num_predictors = length(predictors)
results = rep(0, num_predictors)
for (i in 1:num_predictors) {
predictor = predictors[i]
temp_analysis_model = as.formula(paste("life_expectancy ~ . -", predictor))
temp_analysis_model = lm(temp_analysis_model, data = data)
r_squared = summary(temp_analysis_model)$r.squared
results[i] = r_squared
}
results_df = data.frame(
var = predictors,
result = results
)
results_df = results_df[order(results_df$result, decreasing = TRUE),]
results_df
library(car)
fit_add_orign = lm(life_expectancy ~ ., data = subset(data, select = -c(country, year)))
vif_reuslts_table = data.frame(as.table(vif(fit_add_orign)))
colnames(vif_reuslts_table) = c("predictor", "VIF")
vif_reuslts_table
data_cleaned = subset(data_transformed, select = -c(country, year, percent_exp, hiv_aids, GDP, thinness_5_9, infant_deaths))
data_cleaned = na.omit(data_cleaned)
fit_add_orign = lm(life_expectancy ~ ., data = subset(data, select = -c(country, year)))
summary(fit_add_orign)
fit_add_trans = lm(life_expectancy ~ ., data = data_cleaned)
summary(fit_add_trans)
fit_int = lm(life_expectancy ~ .^2, data = data_cleaned)
anova(fit_add_trans, fit_int)
fit_add_selected = step(fit_add_trans, direction = "backward", trace = 0)
summary(fit_add_selected)
fit_selected = step(fit_int, direction = "backward", trace = 0)
summary(fit_selected)
df_coef = data.frame(summary(fit_selected)$coefficients)
row.names(df_coef)[df_coef["Pr...t.."] < 0.01]
(predictor_formula_str = paste(row.names(df_coef)[df_coef["Pr...t.."] < 0.01][-1], collapse = " + "))
fit_small = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp + population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality + status:hepatitis + status:total_exp + status:thinness_1_19 + status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling + adult_mortality:log_hiv_aids + adult_mortality:log_GDP + alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp + alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp + BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio + under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI + total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI + diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling + thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids + schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_cleaned)
anova(fit_small, fit_selected)
set.seed(233)
total = nrow(data_cleaned)
trn_idx = sample(total, floor(total * 0.8))
data_trn = data_cleaned[trn_idx, ]
data_tst = data_cleaned[-trn_idx, ]
rmse <- function(model, new_data) {
y_hat = predict(model, newdata = new_data)
return(sqrt(mean((y_hat - data_tst$life_expectancy)^2)))
}
fit_complex = lm(life_expectancy ~ status + adult_mortality + alcohol + hepatitis +
Measles + BMI + under_5_deaths + polio + total_exp + diphtheria +
population + thinness_1_19 + HBI + schooling + log_percent_exp +
log_hiv_aids + log_GDP + status:adult_mortality + status:alcohol +
status:hepatitis + status:BMI + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:population +
adult_mortality:schooling + adult_mortality:log_hiv_aids +
adult_mortality:log_GDP + alcohol:hepatitis + alcohol:Measles +
alcohol:BMI + alcohol:population + alcohol:HBI + alcohol:schooling +
alcohol:log_percent_exp + alcohol:log_hiv_aids + hepatitis:Measles +
hepatitis:total_exp + hepatitis:population + hepatitis:HBI +
hepatitis:log_percent_exp + Measles:BMI + Measles:under_5_deaths +
Measles:total_exp + Measles:HBI + Measles:log_percent_exp +
Measles:log_hiv_aids + Measles:log_GDP + BMI:under_5_deaths +
BMI:total_exp + BMI:diphtheria + BMI:population + BMI:thinness_1_19 +
BMI:HBI + BMI:schooling + under_5_deaths:polio + under_5_deaths:total_exp +
under_5_deaths:population + under_5_deaths:HBI + under_5_deaths:schooling +
under_5_deaths:log_percent_exp + under_5_deaths:log_hiv_aids +
under_5_deaths:log_GDP + polio:total_exp + polio:population +
polio:HBI + total_exp:diphtheria + total_exp:thinness_1_19 +
total_exp:HBI + total_exp:log_percent_exp + total_exp:log_GDP +
diphtheria:HBI + diphtheria:schooling + diphtheria:log_percent_exp +
population:HBI + population:log_percent_exp + population:log_hiv_aids +
population:log_GDP + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + thinness_1_19:log_GDP + HBI:schooling +
HBI:log_hiv_aids + schooling:log_percent_exp + schooling:log_hiv_aids +
schooling:log_GDP + log_percent_exp:log_GDP,
data = data_trn)
fit_simple = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp +
population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality +
status:hepatitis + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling +
adult_mortality:log_hiv_aids + adult_mortality:log_GDP +
alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp +
alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp +
BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio +
under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI +
total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI +
diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids +
schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_trn)
trn_rmse_complex = rmse(fit_complex, data_trn)
tst_rmse_complex = rmse(fit_complex, data_tst)
trn_rmse_simple = rmse(fit_simple, data_trn)
tst_rmse_simple = rmse(fit_simple, data_tst)
library(knitr)
kable(data.frame(model = c("Simple", "Complex"),
"Train RMSE" = c(trn_rmse_simple, trn_rmse_complex),
"Test RMSE" = c(tst_rmse_simple, tst_rmse_complex)))
# Create a model based on the training dataset with the predictors chosen via backward AIC
fit_add = lm(life_expectancy ~ status + adult_mortality + hepatitis + BMI + under_5_deaths + total_exp + diphtheria + population + thinness_1_19 + HBI + schooling + log_percent_exp + log_hiv_aids + log_GDP, data = data_trn)
trn_rmse_add = rmse(fit_add, data_trn)
tst_rmse_add = rmse(fit_add, data_tst)
kable(data.frame(model = c("Simple", "Additive"),
"Train RMSE" = c(trn_rmse_simple, trn_rmse_add),
"Test RMSE" = c(tst_rmse_simple, tst_rmse_add)))
fit_simple = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp +
population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality +
status:hepatitis + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling +
adult_mortality:log_hiv_aids + adult_mortality:log_GDP +
alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp +
alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp +
BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio +
under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI +
total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI +
diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids +
schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_cleaned)
plot(fit_simple)
par(mfrow = c(2, 2))
plot(fit_simple)
par(mfrow = c(2, 2))
plot(fit_simple)
plot(fit_simple)
par(mfrow = c(2, 2))
plot(fit_simple)
hist(resid(fit_simple),
xlab = "Residuals",
main = "Histogram of Residuals, fit_simple",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
qqnorm(resid(fit_simple),
main = "Normal Q-Q Plot, fit_simple",
col = "darkgrey")
qqline(resid(fit_simple), col = "dodgerblue", lwd = 2)
# Statistical Tests
library(lmtest)
bp_complex <- bptest(fit_complex)
shapiro_complex <- shapiro.test(resid(fit_complex))
dw_complex <- dwtest(fit_complex)
# Statistical Tests
library(lmtest)
bp_complex <- bptest(fit_simple)
shapiro_complex <- shapiro.test(resid(fit_simple))
dw_complex <- dwtest(fit_simple)
# Set default CRAN mirror and install required packages
options(repos = c(CRAN = "https://cloud.r-project.org"))
required_packages <- c("tseries", "lmtest", "car", "glmnet", "caret", "readr")
new_packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if (length(new_packages)) install.packages(new_packages, dependencies = TRUE)
library(readr)
data = read_csv('./data/life_expectancy.csv', show_col_types = FALSE)
head(data)
library(knitr)
predictors = data.frame(names = c("country", "status", "adult mortality", "infant deaths", "Alcohol", "BMI", "GDP", "Population", "Schooling"),
types = c("categorical", "dummy", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric"))
kable(predictors)
names(data)[names(data) == "Country"] = "country"
names(data)[names(data) == "Year"] = "year"
names(data)[names(data) == "Status"] = "status"
names(data)[names(data) == "Life expectancy"] = "life_expectancy"
names(data)[names(data) == "Adult Mortality"] = "adult_mortality"
names(data)[names(data) == "infant deaths"] = "infant_deaths"
names(data)[names(data) == "Alcohol"] = "alcohol"
names(data)[names(data) == "percentage expenditure"] = "percent_exp"
names(data)[names(data) == "Hepatitis B"] = "hepatitis"
names(data)[names(data) == "measles"] = "measles"
names(data)[names(data) == "under-five deaths"] = "under_5_deaths"
names(data)[names(data) == "Polio"] = "polio"
names(data)[names(data) == "Total expenditure"] = "total_exp"
names(data)[names(data) == "Diphtheria"] = "diphtheria"
names(data)[names(data) == "HIV/AIDS"] = "hiv_aids"
names(data)[names(data) == "Population"] = "population"
names(data)[names(data) == "thinness  1-19 years"] = "thinness_1_19"
names(data)[names(data) == "thinness 5-9 years"] = "thinness_5_9"
names(data)[names(data) == "Income composition of resources"] = "HBI"
names(data)[names(data) == "Schooling"] = "schooling"
data$country = as.factor(data$country)
data$year = as.factor(data$year)
data$status = as.factor(data$status)
data = subset(data, percent_exp > 0)
data = subset(data, hiv_aids > 0)
data = subset(data, GDP > 0)
data = na.omit(data)
data_numeric_only = subset(data, select = -c(country, year, status))
pairs(data_numeric_only)
data_transformed = data.frame(data)
data_transformed["log_percent_exp"] = log(data_transformed$percent_exp)
data_transformed["log_hiv_aids"] = log(data_transformed$hiv_aids)
data_transformed["log_GDP"] = log(data_transformed$GDP)
var_cors = round(cor(data_numeric_only), 2)
var_cors
var_cors_df = as.data.frame(as.table(var_cors))
var_cors_df_ordered = var_cors_df[order(var_cors_df$Freq, decreasing = TRUE), ]
var_cors_df_ordered = subset(var_cors_df_ordered, var_cors_df_ordered$Var1 != var_cors_df_ordered$Var2)
var_cors_df_ordered = subset(var_cors_df_ordered, (var_cors_df_ordered$Var1 != "life_expectancy" & var_cors_df_ordered$Var2 != "life_expectancy"))
colnames(var_cors_df_ordered) = c("response1", "response2", "cor")
var_cors_df_ordered
full_model = lm(life_expectancy ~ ., data = data)
summary(full_model)$r.squared
predictors = names(data)
num_predictors = length(predictors)
results = rep(0, num_predictors)
for (i in 1:num_predictors) {
predictor = predictors[i]
temp_analysis_model = as.formula(paste("life_expectancy ~ . -", predictor))
temp_analysis_model = lm(temp_analysis_model, data = data)
r_squared = summary(temp_analysis_model)$r.squared
results[i] = r_squared
}
results_df = data.frame(
var = predictors,
result = results
)
results_df = results_df[order(results_df$result, decreasing = TRUE),]
results_df
library(car)
fit_add_orign = lm(life_expectancy ~ ., data = subset(data, select = -c(country, year)))
vif_reuslts_table = data.frame(as.table(vif(fit_add_orign)))
colnames(vif_reuslts_table) = c("predictor", "VIF")
vif_reuslts_table
data_cleaned = subset(data_transformed, select = -c(country, year, percent_exp, hiv_aids, GDP, thinness_5_9, infant_deaths))
data_cleaned = na.omit(data_cleaned)
fit_add_orign = lm(life_expectancy ~ ., data = subset(data, select = -c(country, year)))
summary(fit_add_orign)
fit_add_trans = lm(life_expectancy ~ ., data = data_cleaned)
summary(fit_add_trans)
fit_int = lm(life_expectancy ~ .^2, data = data_cleaned)
anova(fit_add_trans, fit_int)
fit_add_selected = step(fit_add_trans, direction = "backward", trace = 0)
summary(fit_add_selected)
fit_selected = step(fit_int, direction = "backward", trace = 0)
summary(fit_selected)
df_coef = data.frame(summary(fit_selected)$coefficients)
row.names(df_coef)[df_coef["Pr...t.."] < 0.01]
(predictor_formula_str = paste(row.names(df_coef)[df_coef["Pr...t.."] < 0.01][-1], collapse = " + "))
fit_small = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp + population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality + status:hepatitis + status:total_exp + status:thinness_1_19 + status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling + adult_mortality:log_hiv_aids + adult_mortality:log_GDP + alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp + alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp + BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio + under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI + total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI + diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling + thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids + schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_cleaned)
anova(fit_small, fit_selected)
set.seed(233)
total = nrow(data_cleaned)
trn_idx = sample(total, floor(total * 0.8))
data_trn = data_cleaned[trn_idx, ]
data_tst = data_cleaned[-trn_idx, ]
rmse <- function(model, new_data) {
y_hat = predict(model, newdata = new_data)
return(sqrt(mean((y_hat - data_tst$life_expectancy)^2)))
}
fit_complex = lm(life_expectancy ~ status + adult_mortality + alcohol + hepatitis +
Measles + BMI + under_5_deaths + polio + total_exp + diphtheria +
population + thinness_1_19 + HBI + schooling + log_percent_exp +
log_hiv_aids + log_GDP + status:adult_mortality + status:alcohol +
status:hepatitis + status:BMI + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:population +
adult_mortality:schooling + adult_mortality:log_hiv_aids +
adult_mortality:log_GDP + alcohol:hepatitis + alcohol:Measles +
alcohol:BMI + alcohol:population + alcohol:HBI + alcohol:schooling +
alcohol:log_percent_exp + alcohol:log_hiv_aids + hepatitis:Measles +
hepatitis:total_exp + hepatitis:population + hepatitis:HBI +
hepatitis:log_percent_exp + Measles:BMI + Measles:under_5_deaths +
Measles:total_exp + Measles:HBI + Measles:log_percent_exp +
Measles:log_hiv_aids + Measles:log_GDP + BMI:under_5_deaths +
BMI:total_exp + BMI:diphtheria + BMI:population + BMI:thinness_1_19 +
BMI:HBI + BMI:schooling + under_5_deaths:polio + under_5_deaths:total_exp +
under_5_deaths:population + under_5_deaths:HBI + under_5_deaths:schooling +
under_5_deaths:log_percent_exp + under_5_deaths:log_hiv_aids +
under_5_deaths:log_GDP + polio:total_exp + polio:population +
polio:HBI + total_exp:diphtheria + total_exp:thinness_1_19 +
total_exp:HBI + total_exp:log_percent_exp + total_exp:log_GDP +
diphtheria:HBI + diphtheria:schooling + diphtheria:log_percent_exp +
population:HBI + population:log_percent_exp + population:log_hiv_aids +
population:log_GDP + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + thinness_1_19:log_GDP + HBI:schooling +
HBI:log_hiv_aids + schooling:log_percent_exp + schooling:log_hiv_aids +
schooling:log_GDP + log_percent_exp:log_GDP,
data = data_trn)
fit_simple = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp +
population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality +
status:hepatitis + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling +
adult_mortality:log_hiv_aids + adult_mortality:log_GDP +
alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp +
alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp +
BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio +
under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI +
total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI +
diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids +
schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_trn)
trn_rmse_complex = rmse(fit_complex, data_trn)
tst_rmse_complex = rmse(fit_complex, data_tst)
trn_rmse_simple = rmse(fit_simple, data_trn)
tst_rmse_simple = rmse(fit_simple, data_tst)
library(knitr)
kable(data.frame(model = c("Simple", "Complex"),
"Train RMSE" = c(trn_rmse_simple, trn_rmse_complex),
"Test RMSE" = c(tst_rmse_simple, tst_rmse_complex)))
# Create a model based on the training dataset with the predictors chosen via backward AIC
fit_add = lm(life_expectancy ~ status + adult_mortality + hepatitis + BMI + under_5_deaths + total_exp + diphtheria + population + thinness_1_19 + HBI + schooling + log_percent_exp + log_hiv_aids + log_GDP, data = data_trn)
trn_rmse_add = rmse(fit_add, data_trn)
tst_rmse_add = rmse(fit_add, data_tst)
kable(data.frame(model = c("Simple", "Additive"),
"Train RMSE" = c(trn_rmse_simple, trn_rmse_add),
"Test RMSE" = c(tst_rmse_simple, tst_rmse_add)))
fit_simple = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp +
population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality +
status:hepatitis + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling +
adult_mortality:log_hiv_aids + adult_mortality:log_GDP +
alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp +
alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp +
BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio +
under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI +
total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI +
diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids +
schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_cleaned)
# Statistical Tests
library(lmtest)
bp_simple <- bptest(fit_simple)
shapiro_simple <- shapiro.test(resid(fit_simple))
dw_simple <- dwtest(fit_simple)
hist(resid(fit_simple),
xlab = "Residuals",
main = "Histogram of Residuals, fit_simple",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
qqnorm(resid(fit_simple),
main = "Normal Q-Q Plot, fit_simple",
col = "darkgrey")
qqline(resid(fit_simple), col = "dodgerblue", lwd = 2)
mean(rstandard(fit_simple)[abs(rstandard(fit_simple)) > 2])
# calculating cooks distance for all the data points for the selected simple model that was trained on all the data
simple_int_mod_cd = cooks.distance(fit_simple)
sum(simple_int_mod_cd > 4/length(simple_int_mod_cd))
fit_simple_fix = lm(life_expectancy ~ adult_mortality + Measles + BMI + polio + total_exp +
population + thinness_1_19 + HBI + log_hiv_aids + status:adult_mortality +
status:hepatitis + status:total_exp + status:thinness_1_19 +
status:HBI + status:schooling + adult_mortality:BMI + adult_mortality:schooling +
adult_mortality:log_hiv_aids + adult_mortality:log_GDP +
alcohol:hepatitis + alcohol:Measles + alcohol:log_percent_exp +
alcohol:log_hiv_aids + hepatitis:total_exp + hepatitis:log_percent_exp +
BMI:population + BMI:thinness_1_19 + BMI:schooling + under_5_deaths:polio +
under_5_deaths:HBI + under_5_deaths:schooling + polio:HBI +
total_exp:thinness_1_19 + total_exp:HBI + diphtheria:HBI +
diphtheria:schooling + thinness_1_19:HBI + thinness_1_19:schooling +
thinness_1_19:log_hiv_aids + HBI:schooling + HBI:log_hiv_aids +
schooling:log_percent_exp + schooling:log_GDP + log_percent_exp:log_GDP,
data = data_cleaned,
subset = simple_int_mod_cd < 4 / length(simple_int_mod_cd))
shapiro.test(resid(fit_simple_fix))
qqnorm(resid(fit_simple_fix), col = "darkgrey")
qqline(resid(fit_simple_fix), col = "dodgerblue", lwd = 2)
mean(rstandard(fit_simple)[abs(rstandard(fit_simple_fix)) > 2])
summary(fit_simple_fix)$r.squared
summary(fit_simple_fix)$coefficients
